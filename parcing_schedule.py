import bs4
import requests
import io
import pandas as pd
import datetime
import re


def get_weekday(date):
    weekday = datetime.datetime.weekday(date)
    str_weekday = ''
    match weekday:
        case 0:
            str_weekday = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        case 1:
            str_weekday = '–≤—Ç–æ—Ä–Ω–∏–∫'
        case 2:
            str_weekday = '—Å—Ä–µ–¥—É'
        case 3:
            str_weekday = '—á–µ—Ç–≤–µ—Ä–≥'
        case 4:
            str_weekday = '–ø—è—Ç–Ω–∏—Ü—É'
        case 5:
            str_weekday = '—Å—É–±–±–æ—Ç—É'
        case 6:
            str_weekday = '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    return str_weekday


def get_url(url_print):
    source = requests.get(url_print)  # —á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    soup = bs4.BeautifulSoup(source.content, 'lxml')  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ BeautifulSoup –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞

    table = soup.select('.rasp_table')  # –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    if "https://schedule.nspu.ru/group_shedule" in url_print:
        table = table[1]
    else:
        table = table[0]

    data = pd.read_html(io.StringIO(str(table)))  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ dataframe
    data = data[0]
    return data

def where_room(url_print):
    source = requests.get(url_print)  # —á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    ROOMS = ''
    output = ''
    if not "https://schedule.nspu.ru/room_shedule" in url_print:
        soup = bs4.BeautifulSoup(source.content, 'lxml')  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ BeautifulSoup –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
    # –µ—Å–ª–∏ —á—Ç–æ –û–¢–ö–õ–Æ–ß–ò–¢–¨, –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏ –∫–æ—Ä–ø—É—Å–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        table = soup.select('.rasp_table')  # –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        if "https://schedule.nspu.ru/group_shedule" in url_print:
            table = table[1]
        else:
            table = table[0]
        a = soup.find_all('a', table)
        url_room = re.findall(r'<a href="room_shedule(.*?)">', str(a))
        rooms=[]
        url_room = list(set(url_room))
        for i in range(len(url_room)):
            source_room = requests.get('https://schedule.nspu.ru/room_shedule'+url_room[i])
            soup_room = bs4.BeautifulSoup(source_room.text, 'html.parser')
            r = soup_room.find('h2').text.strip()
            rooms.append(str(r))
        cleaned_elements = [element.replace('\r', '') for element in rooms]
        output = '\n\n‚û°Ô∏è–∞. '.join(cleaned_elements)
        if output:
            ROOMS = f'‚û°Ô∏èa. ' + output
        else:
            ROOMS = f'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ªüòî'
    else:
        source = requests.get(url_print)
        soup_room = bs4.BeautifulSoup(source.text, 'html.parser')
        r = soup_room.find('h2').text.strip()
        cleaned_elements = r.replace('\r', '')
        ROOMS = f'‚ùóÔ∏è–í—ã –∏ —Ç–∞–∫ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏‚ùóÔ∏è\n\n ‚û°Ô∏èa. ' + cleaned_elements
    return ROOMS


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
def extract_start_dates(subject):
    dates = re.findall(r'(\d{2}\.\d{2})', subject) # –¥–æ–±–∞–≤–∏—Ç—å "—Å" –µ—Å–ª–∏ —á—Ç–æ –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π –≤ –º–∞—Å–∫–µ –ø–æ–∏—Å–∫–∞
    return [datetime.datetime.strptime(date+f'.{datetime.date.today().year}', '%d.%m.%Y') for date in dates]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å
def filter_subjects(schedule_text, current_date):
    lines = schedule_text.strip().split('\n')
    filtered_lines = []

    for line in lines:
        subjects = line.split(';')
        valid_subjects = []

        for subject in subjects:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            start_dates = extract_start_dates(subject)

            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ, –ø—Ä–µ–¥–º–µ—Ç –Ω–∞—á–∞–ª—Å—è
            if any(start_date <= current_date for start_date in start_dates):
                valid_subjects.append(subject)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        filtered_lines.append('; '.join(valid_subjects))

    return '\n'.join(filtered_lines)


def contains_date(text):
    pattern = r'\b(?!(?:–¥–æ|–ø–æ)\s+)\d{2}\.\d{2}\b'
    matches = re.findall(r'\b(?!(?:–¥–æ|–ø–æ)\s+)\d{2}\.\d{2}\b', text)
    return matches


def get_table(data, date_print):

    try:
        table = pd.DataFrame()

        date = date_print
        nums = int(datetime.datetime.utcnow().isocalendar()[1])
        weekday = datetime.datetime.weekday(date)
        boolweek = True if (nums % 2) != 0 else False # True - —á–∏—Å–ª–∏—Ç–µ–ª—å –Ω–µ–¥–µ–ª—è False - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å

        nan_rows = (data[data[0].isna()].index).tolist() #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

        data[2] = data[2].str.replace('&nbsp', '')
        data[3] = data[3].str.replace('&nbsp', '')

        # weekday = 1
        # boolweek = False
        match weekday:
            case 0:
                # print("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
                mon = data.loc[nan_rows[0] + 1: nan_rows[1] - 1]
                del mon[0]
                del mon[3 if boolweek == True else 2]
                mon = mon.loc[mon[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(mon.to_csv(sep='\t', index=False, header=False))
            case 1:
                # print("–í—Ç–æ—Ä–Ω–∏–∫")
                tue = data.loc[nan_rows[1] + 1: nan_rows[2] - 1]
                del tue[0]
                del tue[3 if boolweek == True else 2]
                tue = tue.loc[tue[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(tue.to_csv(sep='\t', index=False, header = False))
            case 2:
                # print("–°—Ä–µ–¥–∞")
                wed = data.loc[nan_rows[2] + 1: nan_rows[3] - 1]
                del wed[0]
                del wed[3 if boolweek == True else 2]
                wed = wed.loc[wed[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(wed.to_csv(sep='\t', index=False, header = False))
            case 3:
                # print("–ß–µ—Ç–≤–µ—Ä–≥")
                thu = data.loc[nan_rows[3] + 1: nan_rows[4] - 1]
                del thu[0]
                del thu[3 if boolweek == True else 2]
                thu = thu.loc[thu[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(thu.to_csv(sep='\t', index=False, header = False))
            case 4:
                # print("–ü—è—Ç–Ω–∏—Ü–∞")
                fri = data.loc[nan_rows[4] + 1: nan_rows[5] - 1]
                del fri[0]
                del fri[3 if boolweek == True else 2]
                fri = fri.loc[fri[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(fri.to_csv(sep='\t', index=False, header = False))
            case 5:
                # print("–°—É–±–±–æ—Ç–∞")
                sat = data.loc[nan_rows[5] + 1: nan_rows[6] - 1]
                del sat[0]
                del sat[3 if boolweek == True else 2]
                sat = sat.loc[sat[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(sat.to_csv(sep='\t', index=False, header = False))
            case 6:
                table = "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!"

        is_date = False
        lines = table.split('\n')
        for line in lines:
            if line:
                if contains_date(line):
                    is_date = True
                else:
                    is_date = False
                    break

        filtered_schedule = filter_subjects(table, date_print) if is_date else table
        schedule_text = filtered_schedule
        schedule_text = re.sub(r'(\d{2}:\d{2})-(\d{2}:\d{2})', r'\nüïê\1-\2üïê', schedule_text)
        schedule_text = re.sub(r'(8:30)-(\d{2}:\d{2})', r'\nüïê\1-\2üïê', schedule_text)

        schedule_text = re.sub(r'(\d{2}:\d{2}.+?),\s', r'\1,\nüë®‚Äçüè´', schedule_text)
        schedule_text = re.sub(r'(;.+?),\s', r'\1,\nüë®‚Äçüè´', schedule_text)

        schedule_text = re.sub(r'((8:30)-(\d{2}:\d{2})üïê)\s', r'\1\nüìö', schedule_text)
        schedule_text = re.sub(r'((\d{2}:\d{2})-(\d{2}:\d{2})üïê)\s', r'\1\nüìö', schedule_text)

        schedule_text = re.sub(r'–∞\. (\d+)', r'\nüö™–∞. \1', schedule_text)

        # schedule_text = re.sub(r'(–∞\. \d+)\s', r'\1,\nüìÖ', schedule_text) #–µ—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞
        schedule_text = re.sub(r'üìÖ, ', r'üìÖ', schedule_text)
        schedule_text = re.sub(r'—Å ([\d.]+ –≥\.)', r'\nüìÖ—Å \1', schedule_text)

        schedule_text = re.sub(r'; ', r'\nüìö', schedule_text)

        if schedule_text == '' or schedule_text is None or schedule_text == '\n' or schedule_text == '\n\n':
            schedule_text = '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π'

        return schedule_text
    except Exception as e:
        schedule_text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚ùóÔ∏è \n–¢–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—èüòî'
        return schedule_text


def get_tableOnWeek(data, weekday):
    try:
        table = pd.DataFrame()
        nums = int(datetime.datetime.utcnow().isocalendar()[1])

        boolweek = True if (nums % 2) != 0 else False # True - —á–∏—Å–ª–∏—Ç–µ–ª—å –Ω–µ–¥–µ–ª—è False - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å

        nan_rows = (data[data[0].isna()].index).tolist() #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

        data[2] = data[2].str.replace('&nbsp', '')
        data[3] = data[3].str.replace('&nbsp', '')

        # weekday = 1
        # boolweek = False
        match weekday:
            case 0:
                # print("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
                mon = data.loc[nan_rows[0] + 1: nan_rows[1] - 1]
                del mon[0]
                del mon[3 if boolweek == True else 2]
                mon = mon.loc[mon[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(mon.to_csv(sep='\t', index=False, header=False))
            case 1:
                # print("–í—Ç–æ—Ä–Ω–∏–∫")
                tue = data.loc[nan_rows[1] + 1: nan_rows[2] - 1]
                del tue[0]
                del tue[3 if boolweek == True else 2]
                tue = tue.loc[tue[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(tue.to_csv(sep='\t', index=False, header=False))
            case 2:
                # print("–°—Ä–µ–¥–∞")
                wed = data.loc[nan_rows[2] + 1: nan_rows[3] - 1]
                del wed[0]
                del wed[3 if boolweek == True else 2]
                wed = wed.loc[wed[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(wed.to_csv(sep='\t', index=False, header=False))
            case 3:
                # print("–ß–µ—Ç–≤–µ—Ä–≥")
                thu = data.loc[nan_rows[3] + 1: nan_rows[4] - 1]
                del thu[0]
                del thu[3 if boolweek == True else 2]
                thu = thu.loc[thu[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(thu.to_csv(sep='\t', index=False, header=False))
            case 4:
                # print("–ü—è—Ç–Ω–∏—Ü–∞")
                fri = data.loc[nan_rows[4] + 1: nan_rows[5] - 1]
                del fri[0]
                del fri[3 if boolweek == True else 2]
                fri = fri.loc[fri[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(fri.to_csv(sep='\t', index=False, header=False))
            case 5:
                # print("–°—É–±–±–æ—Ç–∞")
                sat = data.loc[nan_rows[5] + 1: nan_rows[6] - 1]
                del sat[0]
                del sat[3 if boolweek == True else 2]
                sat = sat.loc[sat[2 if boolweek == True else 3].str.len().gt(0)]
                table = str(sat.to_csv(sep='\t', index=False, header=False))
            case 6:
                table = "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!"

        schedule_text = table
        schedule_text = re.sub(r'(\d{2}:\d{2})-(\d{2}:\d{2})', r'üïê\1-\2üïê', schedule_text)
        schedule_text = re.sub(r'(8:30)-(\d{2}:\d{2})', r'üïê\1-\2üïê', schedule_text)

        schedule_text = re.sub(r'((8:30)-(\d{2}:\d{2})üïê)\s', r'\1\nüìö', schedule_text)
        schedule_text = re.sub(r'((\d{2}:\d{2})-(\d{2}:\d{2})üïê)\s', r'\1\nüìö', schedule_text)
        schedule_text = re.sub(r'; ', r'\nüìö', schedule_text)

        if schedule_text == '':
            schedule_text = '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n'
        return schedule_text

    except Exception as e:
        schedule_text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚ùóÔ∏è \n–¢–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—èüòî'
        return schedule_text


def notification(url_print):
    source = requests.get(url_print)  # —á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    soup = bs4.BeautifulSoup(source.content, 'lxml')  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ BeautifulSoup –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞

    table = soup.select('.rasp_table')  # –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    if "https://schedule.nspu.ru/group_shedule" in url_print:
        table = table[0]
    else:
        data = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ—Ç!"
        return data

    data = pd.read_html(io.StringIO(str(table)))  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ dataframe
    data = data[0]
    del data[0]
    if data.empty == True:
        data = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ—Ç!"
    else:
        data = str(data.to_csv(sep='\t', index=False, header=False))

    data = re.sub( r"!+(?=[^!]*$)", r'!\n', data)
    data = re.sub(r"(!)", r'!\n', data)

    data = re.sub(r"_+(?=[^!]*$)", r'\n', data)

    data = re.sub(r'(—Å \d{2}\.\d{2}\.\d{4} –ø–æ \d{2}\.\d{2}\.\d{4})', r'\1\n', data)
    data = re.sub(r'(—Å \d{2}\.\d{2}\.\d{2} –ø–æ \d{2}\.\d{2}\.\d{2})', r'\1\n', data)
    data = re.sub(r'(—Å \d{2}\.\d{2}\.\d{4} –≥. –ø–æ \d{2}\.\d{2}\.\d{4} –≥.)', r'\1\n', data)

    data = re.sub(r'(—Å–µ–º–µ—Å—Ç—Ä)', r'\1\n', data)

    data = re.sub(r'(\b\w{3,}\.)', r'\1\n', data)
    return data

def news_parcer(i):
    url_= 'https://nspu.ru/news/'
    source = requests.get(url_)  # —á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    soup = bs4.BeautifulSoup(source.text, 'html.parser')  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ BeautifulSoup –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
    news = soup.find_all('div', class_ = 'col-md-4 pt-3 pb-2 pcs-news-main-page-item')
    contain = news[i]('div', class_='row')
    date = contain[1].text.strip()
    title = contain[2].text.strip()
    mainText = contain[3].text.strip()
    url_news = 'https://nspu.ru' + (re.search(r'<a href="(.*?)">', str(contain[2]))).group(1)
    return (f'üóì–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {date}\n\n'
              f'üì∞{title}\n\n'
              f'{mainText}\n\n'
              f'–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ: {url_news}')


# today = datetime.datetime.now()
# tomorrow = today + datetime.timedelta(days=-3)
# print(get_table(get_url('https://schedule.nspu.ru/group_shedule.php?id=2592'),tomorrow ))
#
# print(get_tableOnWeek(get_url('https://schedule.nspu.ru/zgroup_shedule.php?id=2063'), 3))

# print(where_room('https://schedule.nspu.ru/group_shedule.php?id=2163'))

# print(get_weekday())
# print(get_tableOnWeek(get_url('https://schedule.nspu.ru/group_shedule.php?id=2482'), 2))
# print(str(get_url('https://schedule.nspu.ru/group_shedule.php?id=2163').to_csv(sep='\t', index=False, header=False))
# )
# print(notification('https://schedule.nspu.ru/zgroup_shedule.php?id=2063'))

# https://schedule.nspu.ru/group_shedule.php?id=1792 –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–æ–π why?

